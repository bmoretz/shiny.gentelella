on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   r: 'release'}
          - {os: windows-latest, r: 'release'}
          - {os: ubuntu-latest,   r: 'devel'}
          - {os: ubuntu-latest,   r: 'release'}
          - {os: ubuntu-latest,   r: 'oldrel'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      - run: Rscript -e 'install.packages("remotes")'

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Install System Dependencies (linux)
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install System Dependencies (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew install git
          brew install libgit2

      - name: Determine renv package directory (renv) [Linux]
        if: |
          startsWith(runner.os, 'Linux')
        run: |
          echo "renv_dir=~/.local/share/renv" >> $GITHUB_ENV
      - name: Determine renv package directory (renv) [macOS]
        if: |
          startsWith(runner.os, 'macOS')
        run: |
          echo "renv_dir=~/Library/Application Support/renv" >> $GITHUB_ENV
      - name: Determine renv package directory (renv) [Windows]
        if: |
          startsWith(runner.os, 'Windows')
        run: |
          echo "renv_dir=~\AppData\Local\renv" >> $GITHUB_ENV

      - name: display renv
        run: echo ${{ env.renv_dir }}

      - name: Cache packages
        uses: actions/cache@v2
        with:
          path: ${{ env.renv_dir }}
          key: ${{ matrix.config.os }}-renv-${{ hashFiles('**/renv.lock') }}
          restore-keys: |
            ${{ matrix.config.os }}-renv-${{ hashFiles('**/renv.lock') }}-

      - name: Restore renv
        run: |
          if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv")
          renv::restore()
          renv::install("rcmdcheck")
        shell: Rscript {0}

      - name: Session Info
        run: |
          renv::install("sessioninfo")
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), build_args = c("--no-build-vignettes"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
